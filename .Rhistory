scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
dev.off()
2970 / 2
jpeg(width = 1485, height = 2100, file = "C:/Ops/Map.jpeg")
lattice::xyplot(locationlat ~ locationlong, s,
scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
dev.off()
load("ANSJobData/Data/CleanData.rdt")
windows()
#sam <- sample(1:nrow(JobData), 10000)
s <- JobData[, c("locationlat", "locationlong")]
# s <- s[s$locationlat > 48 & s$locationlat < 62 & s$locationlong < 3,]    # UK
s <- s[s$locationlat > 48 & s$locationlat < 62 & s$locationlong < 3,]    # London
lattice::xyplot(locationlat ~ locationlong, s,
#   scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
# s <- s[s$locationlat > 48 & s$locationlat < 62 & s$locationlong < 3,]    # UK
s <- s[s$locationlat > 51.25 & s$locationlat < 51.75 & s$locationlong > -0.55 & s$locationlong < 0.3,]    # London
windows()
lattice::xyplot(locationlat ~ locationlong, s,
#   scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
# jpeg(width = 1485, height = 2100, file = "C:/Ops/Map.jpeg")
# pdf(width = 11.69, height = 16.53, file = "C:/Ops/Map.pdf")    # A3 PDF
pdf(paper = "a4r" file = "C:/Ops/MapLondon.pdf")    # A4 landscape PDF
# jpeg(width = 1485, height = 2100, file = "C:/Ops/Map.jpeg")
# pdf(width = 11.69, height = 16.53, file = "C:/Ops/Map.pdf")    # A3 PDF
pdf(paper = "a4r", file = "C:/Ops/MapLondon.pdf")    # A4 landscape PDF
lattice::xyplot(locationlat ~ locationlong, s,
#   scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
dev.off()
# jpeg(width = 1485, height = 2100, file = "C:/Ops/Map.jpeg")
# pdf(width = 11.69, height = 16.53, file = "C:/Ops/Map.pdf")    # A3 PDF
pdf(width = 11.69, height = 8.27, file = "C:/Ops/MapLondon.pdf")    # A4 landscape PDF
lattice::xyplot(locationlat ~ locationlong, s,
#   scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
dev.off()
# jpeg(width = 1485, height = 2100, file = "C:/Ops/Map.jpeg")
# pdf(width = 11.69, height = 16.53, file = "C:/Ops/Map.pdf")    # A3 PDF
pdf(width = 16.53, height = 11.69, file = "C:/Ops/MapLondon.pdf")    # A4 landscape PDF
lattice::xyplot(locationlat ~ locationlong, s,
#   scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
dev.off()
# jpeg(width = 1485, height = 2100, file = "C:/Ops/Map.jpeg")
# pdf(width = 11.69, height = 16.53, file = "C:/Ops/Map.pdf")    # A3 PDF
pdf(width = 11.69, height = 8.27, file = "C:/Ops/MapLondon.pdf")    # A4 landscape PDF
lattice::xyplot(locationlat ~ locationlong, s,
scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
cex = 0.5
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
lattice::xyplot(locationlat ~ locationlong, s,
scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
cex = 0.5,
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
dev.off()
# jpeg(width = 1485, height = 2100, file = "C:/Ops/Map.jpeg")
# pdf(width = 11.69, height = 16.53, file = "C:/Ops/Map.pdf")    # A3 PDF
pdf(width = 11.69, height = 8.27, file = "C:/Ops/MapLondon.pdf")    # A4 landscape PDF
lattice::xyplot(locationlat ~ locationlong, s,
scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
cex = 0.25,
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
dev.off()
# jpeg(width = 1485, height = 2100, file = "C:/Ops/Map.jpeg")
# pdf(width = 11.69, height = 16.53, file = "C:/Ops/Map.pdf")    # A3 PDF
pdf(width = 11.69, height = 8.27, file = "C:/Ops/MapLondon.pdf")    # A4 landscape PDF
lattice::xyplot(locationlat ~ locationlong, s,
scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
cex = 0.1,
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
dev.off()
# jpeg(width = 1485, height = 2100, file = "C:/Ops/Map.jpeg")
# pdf(width = 11.69, height = 16.53, file = "C:/Ops/Map.pdf")    # A3 PDF
pdf(width = 116.9, height = 82.7, file = "C:/Ops/MapLondon.pdf")    # A4 landscape PDF
lattice::xyplot(locationlat ~ locationlong, s,
scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
#   cex = 0.1,
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
dev.off()
# jpeg(width = 1485, height = 2100, file = "C:/Ops/Map.jpeg")
# pdf(width = 11.69, height = 16.53, file = "C:/Ops/Map.pdf")    # A3 PDF
pdf(width = 58.45, height = 41.35, file = "C:/Ops/MapLondon.pdf")    # A4 landscape PDF
lattice::xyplot(locationlat ~ locationlong, s,
scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
#   cex = 0.1,
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
dev.off()
# jpeg(width = 1485, height = 2100, file = "C:/Ops/Map.jpeg")
# pdf(width = 11.69, height = 16.53, file = "C:/Ops/Map.pdf")    # A3 PDF
pdf(width = 29.225, height = 20.675, file = "C:/Ops/MapLondon.pdf")    # A4 landscape PDF
lattice::xyplot(locationlat ~ locationlong, s,
scales=list(x=list(draw=FALSE), y = list(draw = FALSE)),
#   cex = 0.1,
xlab = "",
ylab = "",
col = "black",
pch = ".",
par.settings = list(axis.line = list(col = 0))
)
dev.off()
swirl()
library(swirl)
swirl()
rm(ls())
rm(list = ls())
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- sub1[,10:12]
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myclust(hclustering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562, 563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(ncol(sub1), ncol(sub1) - 1)], centers = 6)
kClust <- kmeans(sub1[,-c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1)
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
setwd("RepData_PeerAssessment1/")
dir
dir()
knitr::opts_chunk$set(echo = TRUE)
read.csv("activity.zip")
library(readrr)
library(readr)
read_csv("activity.zip")
amdata <- read_csv("activity.zip")
head(amdata)
?using
?use
?require
table(is.na(amdata$steps))
?as.Date
search("data.table")
search(data.table)
?search
search()
class(amdata)
amdata$date <- as.Date(amdata$date, format = "YYYY-MM-dd")
amdata
head(amdata)
?read_csv
?cols
cols(a = col_integer(), b = col_date(), c = col_integer())
amdata <- read_csv("activity.zip", col_types = cols(a = col_integer(), b = col_date(), c = col_integer()))
amdata <- read_csv("activity.zip", col_types = cols(steps = col_integer(), date = col_date(), interval = col_integer()))
amdata
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
g_amdata <- group_by(amdata, date)
g_amdata
dailysteps <- summarise(g_amdata, sum(steps, na.rm = TRUE))
head(dailysteps)
?summarise
dailysteps <- summarise(g_amdata, steps = sum(steps, na.rm = TRUE))
mean(dailysteps$steps)
amdata
hist(x = dailysteps$steps, y = dailysteps$date)
hist(x = dailysteps$date, y = dailysteps$steps)
dailysteps <- summarise(g_amdata, steps = sum(steps, na.rm = TRUE))
hist(x = dailysteps$date, y = dailysteps$steps)
hist(x = dailysteps$date, y = dailysteps$steps)
hist(x = dailysteps$date, y = dailysteps$steps, breaks = days)
hist(x = dailysteps$date, y = dailysteps$steps, breaks = "days")
?hist
hist(dailysteps$steps)
hist(dailysteps$steps, breaks = 10)
hist(dailysteps$steps, breaks = 10)
hist(dailysteps$steps, breaks = 10)
hist(dailysteps$steps, breaks = 10, xlab = "Steps", main = "Histogram of Number of Steps Per Day")
paste("Mean  :", mean(dailysteps$steps, na.rm = TRUE))
paste("Median:", median(dailysteps$steps, na.rm = TRUE))
mean(dailysteps$steps, na.rm = TRUE)
median(dailysteps$steps, na.rm = TRUE)
amdata_g_interval <- group_by(amdata, interval)
intervalsteps <- summarise(amdata_g_interval, mean(steps))
intervalsteps
intervalsteps <- summarise(amdata_g_interval, mean(steps, na.rm = TRUE))
intervalsteps
intervalsteps <- summarise(amdata_g_interval, steps = mean(steps, na.rm = TRUE))
plot(x = intervalsteps$interval, y = intervalsteps$steps, type = "l")
table(amdata$interval)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(lubridate)
library(dplyr)
amdata$interval <- hm(amdata$interval)
amdata <- read_csv(
"activity.zip",
col_types = cols(steps = col_integer(), date = col_date(), interval = col_integer())
)
hm(head(amdata$interval))
formatC(head(amdata$interval))
formatC(head(amdata$interval), digits = 4)
formatC(head(amdata$interval), digits = 4, flat = "0")
formatC(head(amdata$interval), digits = 4, flag = "0")
formatC(head(amdata$interval), digits = 3, flag = "0")
formatC(head(amdata$interval), width = 4, flag = "0")
amdata$interval <- hm(formatC(amdata$interval), digits = 4, flag = "0")
t <- hm(formatC(amdata$interval), digits = 4, flag = "0")
which(is.na(t))
head(t)
t <- hm(formatC(amdata$interval, digits = 4, flag = "0"))
t <- formatC(amdata$interval, digits = 4, flag = "0")
t <- formatC(amdata$interval, width = 4, flag = "0")
t <- hm(formatC(amdata$interval, width =  4, flag = "0"))
t <- formatC(amdata$interval, width = 4, flag = "0")
head(t)
hm(head(t))
?hm
hms("7 6 5", "3:23:::2", "2 : 23 : 33", "Finished in 9 hours, 20 min and 4 seconds")
hm("2340")
sprintf("%04.0f", head(t))
sprintf("%04.0f", head(amdata$interval))
t <- strptime(sprintf("%04.0f", amdata$interval), format = "%H%M")
head(t)
10 - c(1, 2, 3)
t <- strptime("0000", format = "%H%M") - strptime(sprintf("%04.0f", amdata$interval), format = "%H%M")
head(t)
t <- strptime(sprintf("%04.0f", amdata$interval), format = "%H%M") - strptime("0000", format = "%H%M")
head(t)
class(t)
?difftime
as.difftime(head(t))
as.difftime(head(t), units = "hours")
as.difftime(head(t), units = "minutes")
t <- difftime(strptime(sprintf("%04.0f", amdata$interval), format = "%H%M"), strptime("0000", format = "%H%M"), units = "hours")
head(t)
t <- difftime(strptime(sprintf("%04.0f", amdata$interval), format = "%H%M"), strptime("0000", format = "%H%M"), units = "minutes")
t <- difftime(strptime(sprintf("%04.0f", amdata$interval), format = "%H%M"), strptime("0000", format = "%H%M"), units = "mins")
head(t)
library(chron)
as.chron(head(t))
head(t)
as.chron(head(as.numeric(t)))
?as.chron
amdata$interval <- difftime(
strptime(sprintf("%04.0f", amdata$interval), format = "%H%M"),
strptime("0000", format = "%H%M"),
units = "mins"
)
head(amdata$interval)
60 * 24
plot(
x = intervalsteps$interval,
y = intervalsteps$steps,
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5 Minute Interval",
main = "Mean Steps in a Day"
)
plot(
x = intervalsteps$interval,
y = intervalsteps$steps,
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5 Minute Interval",
main = "Mean Steps Over a Day"
)
plot(
x = intervalsteps$interval,
y = intervalsteps$steps,
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day"
)
amdata_g_interval <- group_by(amdata, interval)
intervalsteps <- summarise(amdata_g_interval, steps = mean(steps, na.rm = TRUE))
intervalsteps$interval <- intervalsteps$interval / 60
plot(
x = intervalsteps$interval,
y = intervalsteps$steps,
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day"
)
which.max(intervalsteps$steps)
interval$interval[which.max(intervalsteps$steps)]
intervalsteps[which.max(intervalsteps$steps),]$interval
amdata_g_interval <- group_by(amdata, interval)
intervalsteps <- summarise(amdata_g_interval, steps = mean(steps, na.rm = TRUE))
intervalsteps$interval <- intervalsteps$interval
amdata_g_interval <- group_by(amdata, interval)
intervalsteps <- summarise(amdata_g_interval, steps = mean(steps, na.rm = TRUE))
plot(
x = intervalsteps$interval,
y = intervalsteps$steps / 60,    # Convert to hours
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day"
)
plot(
x = intervalsteps$interval,
y = (intervalsteps$steps / 60),    # Convert to hours
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day"
)
plot(
x = intervalsteps$interval / 60,
y = intervalsteps$steps,    # Convert to hours
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day"
)
plot(
x = intervalsteps$interval / 60,
y = intervalsteps$steps,    # Convert to hours
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day",
xlim = c(0, 24)
)
plot(
x = intervalsteps$interval / 60,
y = intervalsteps$steps,    # Convert to hours
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day",
xlim = c(0, 25)
)
plot(
x = intervalsteps$interval / 60,
y = intervalsteps$steps,    # Convert to hours
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day",
par(xaxp = c(0, 24, 4))
)
plot(
x = as.numeric(intervalsteps$interval / 60),
y = intervalsteps$steps,    # Convert to hours
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day",
par(xaxp = c(0, 24, 4))
)
plot(
x = as.numeric(intervalsteps$interval / 60),
y = intervalsteps$steps,    # Convert to hours
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day"
)
plot(
x = as.numeric(intervalsteps$interval / 60),
y = intervalsteps$steps,    # Convert to hours
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day",
par(xaxp = c(1, 24, 4))
)
plot(
x = as.numeric(intervalsteps$interval / 60),
y = intervalsteps$steps,    # Convert to hours
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day",
par(xaxp = c(0, 24))
)
plot(
x = as.numeric(intervalsteps$interval / 60),
y = intervalsteps$steps,    # Convert to hours
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day",
xaxp = c(0, 24, 4)
)
plot(
x = as.numeric(intervalsteps$interval / 60),
y = intervalsteps$steps,    # Convert to hours
type = "l",
xlab = "Hour of Day",
ylab = "Mean Steps Per 5min Interval",
main = "Mean Steps Over a Day",
xaxp = c(0, 24, 8)
)
intervalsteps[which.max(intervalsteps$steps),]$interval
?sprintf
t <- intervalsteps[which.max(intervalsteps$steps),]$interval
t
sprintf(t)
as.character(t)
as.Date()
sys.Date()
Sys.Date()
Sys.Date() + t
Sys.time()
as_datetime(Sys.Date + t)
Sys.Date + t
t
as_datetime(Sys.Date() + t)
as_datetime(Sys.Date()) + t
format(as_datetime(Sys.Date()) + t, "%HH:%MM")
format(as_datetime(Sys.Date()) + t, "%HH %MM")
format(as_datetime(Sys.Date()) + t, "%H%M")
format(as_datetime(Sys.Date()) + t, "%H:%M")
as.datetime(t)
as_datetime(t)
t
format(as_datetime(Sys.Date()) + intervalsteps[which.max(intervalsteps$steps),]$interval, "%H:%M")
